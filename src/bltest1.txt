/*
 * OMNI-3MD Robot Controller with BlueDot Remote Control
 * Arduino Code for omnidirectional movement, emergency stop, speed control, and reboot
 * 
 * Hardware:
 * - Arduino Mega
 * - OMNI-3MD motor controller (I2C)
 * - Connected to Raspberry Pi via USB
 */
#include <Arduino.h>
#include <Wire.h>
#include <BnrOmni.h>

// OMNI-3MD configuration
#define OMNI3MD_ADDRESS 0x30  // Default factory address
BnrOmni omni;                 // Create OMNI-3MD object

// Movement parameters
int current_speed = 50;       // Default speed (0-100)
int min_speed = 10;
int max_speed = 100;
int speed_increment = 10;

// Emergency stop flag
bool emergency_stop = false;

// Communication variables
String command = "";
bool command_complete = false;

void readSerialCommand() {
  while (Serial.available()) {
    char c = Serial.read();
    if (c == '\n') {
      command_complete = true;
      break;
    } else {
      command += c;
    }
  }
}

void processMoveCommand() {
  // Parse MOVE command: MOVE:<linear_speed>,<rot_speed>,<direction>
  // Remove "MOVE:" prefix
  String params = command.substring(5);
  
  // Parse parameters
  int comma1 = params.indexOf(',');
  int comma2 = params.lastIndexOf(',');
  
  if (comma1 == -1 || comma2 == -1 || comma1 == comma2) {
    Serial.println("INVALID_MOVE_COMMAND");
    return;
  }
  
  int linear_speed_percent = params.substring(0, comma1).toInt();
  int rot_speed = params.substring(comma1 + 1, comma2).toInt();
  int direction = params.substring(comma2 + 1).toInt();
  
  // Scale linear speed by current speed setting
  int actual_linear_speed = (linear_speed_percent * current_speed) / 100;
  
  // Constrain values to safe ranges
  actual_linear_speed = constrain(actual_linear_speed, 0, 100);
  rot_speed = constrain(rot_speed, -100, 100);
  direction = constrain(direction, 0, 360);
  
  // Send movement command to OMNI-3MD
  omni.movOmni(actual_linear_speed, rot_speed, direction);
  
  // Acknowledge command
  Serial.print("MOVING:");
  Serial.print(actual_linear_speed);
  Serial.print(",");
  Serial.print(rot_speed);
  Serial.print(",");
  Serial.println(direction);
}

void processCommand() {
  command.trim();
  
  if (command.startsWith("MOVE:")) {
    if (!emergency_stop) {
      processMoveCommand();
    } else {
      Serial.println("EMERGENCY_STOP_ACTIVE");
    }
  }
  else if (command == "STOP") {
    omni.stop();
    emergency_stop = false;
    Serial.println("STOPPED");
  }
  else if (command == "EMERGENCY") {
    omni.stop();
    emergency_stop = true;
    Serial.println("EMERGENCY_STOP_ACTIVATED");
  }
  else if (command == "SPEED_UP") {
    if (current_speed < max_speed) {
      current_speed += speed_increment;
      if (current_speed > max_speed) current_speed = max_speed;
    }
    Serial.print("SPEED_SET:");
    Serial.println(current_speed);
  }
  else if (command == "SPEED_DOWN") {
    if (current_speed > min_speed) {
      current_speed -= speed_increment;
      if (current_speed < min_speed) current_speed = min_speed;
    }
    Serial.print("SPEED_SET:");
    Serial.println(current_speed);
  }
  else if (command == "REBOOT") {
    Serial.println("REBOOTING");
    Serial.flush();
    // Software reset
    asm volatile ("  jmp 0");
  }
  else if (command == "STATUS") {
    // Send status information
    Serial.print("STATUS:");
    Serial.print(current_speed);
    Serial.print(",");
    Serial.print(emergency_stop ? "EMERGENCY" : "NORMAL");
    Serial.print(",");
    Serial.println(omni.readBattery());
  }
  else {
    Serial.println("UNKNOWN_COMMAND");
  }
}

void setup() {
  // Initialize serial communication with Raspberry Pi
  Serial.begin(115200);
  
  // Initialize I2C connection to OMNI-3MD
  Wire.begin();
  omni.i2cConnect(OMNI3MD_ADDRESS);
  
  // Set I2C timeout for safety (500ms)
  omni.setI2cTimeout(50);
  
  // Configure PID parameters (adjust based on your system)
  omni.setPid(850, 450, 250);
  
  // Configure ramp parameters for smooth acceleration
  omni.setRamp(35, 950);

  omni.setMinBat(12.0);

  // Encoder Prescalers for motor PID
  omni.setEncPrescaler(M1, 0);
  omni.setEncPrescaler(M2, 0);
  omni.setEncPrescaler(M3, 0);
  
  // Initialize robot to stopped state
  omni.stop();
  
  Serial.println("OMNI-3MD Robot Controller Ready");
  Serial.println("Commands: MOVE:<linear_speed>,<rot_speed>,<direction>");
  Serial.println("          STOP");
  Serial.println("          SPEED_UP");
  Serial.println("          SPEED_DOWN");
  Serial.println("          EMERGENCY");
  Serial.println("          REBOOT");
}

void loop() {
  // Read commands from Raspberry Pi
  if (Serial.available()) {
    readSerialCommand();
  }
  
  // Process complete commands
  if (command_complete) {
    processCommand();
    command = "";
    command_complete = false;
  }
  
  // Safety check - stop if no communication for too long
  // The OMNI-3MD has built-in I2C timeout for this
  
  delay(10); // Small delay for stability
}