#include <Arduino.h>
#include <Wire.h>
#include <BnrOmni.h>

BnrOmni omni;

#define OMNI3MD_ADDRESS 0x30

int linearSpeed = 0;
int rotSpeed = 0;
int direction = 0;

unsigned long last_command_time = 0;
const unsigned long command_timeout_ms = 10000;  // Stop if no command in 10000 ms

// Global flag to track if the robot is stopped
bool is_stopped = true;

void parseCommand(String cmd) {
  if (cmd.length() == 0) {
    Serial.println("Warning: empty command received, ignoring.");
    return;  // Ignore empty string
  }
  
  int linIndex = cmd.indexOf("LIN:");
  int rotIndex = cmd.indexOf("ROT:");
  int dirIndex = cmd.indexOf("DIR:");

  // Check if all fields exist and are in a valid order
  if (linIndex == -1 || rotIndex == -1 || dirIndex == -1 || 
      linIndex > rotIndex || rotIndex > dirIndex) {
    Serial.print("Warning: malformed command received: ");
    Serial.println(cmd);
    return;  // Ignore malformed commands
  }

  int linEnd = cmd.indexOf(',', linIndex);
  int rotEnd = cmd.indexOf(',', rotIndex);
  int dirEnd = cmd.indexOf(']', dirIndex);

  if (linEnd == -1 || rotEnd == -1 || dirEnd == -1) {
    Serial.print("Warning: incomplete command fields: ");
    Serial.println(cmd);
    return;  // Ignore incomplete
  }

  linearSpeed = cmd.substring(linIndex + 4, linEnd).toInt();
  rotSpeed = cmd.substring(rotIndex + 4, rotEnd).toInt();
  direction = cmd.substring(dirIndex + 4, dirEnd).toInt();

  // Constrain values properly
  linearSpeed = constrain(linearSpeed, -100, 100);
  rotSpeed = constrain(rotSpeed, -100, 100);

  // Direction should be a valid angle 0-360, or default to 0
  if (direction < 0 || direction > 360) {
    direction = 0;
  }
}

void setup() {
  Serial.begin(115200);
  Wire.begin();
  omni.i2cConnect(OMNI3MD_ADDRESS);
  omni.setI2cTimeout(50);
  omni.setPid(950, 150, 300);
  omni.setRamp(50, 950);
  omni.setMinBat(12.0);
  omni.setEncPrescaler(M1, 0);
  omni.setEncPrescaler(M2, 0);
  omni.setEncPrescaler(M3, 0);
  omni.stop();
}

String inputString = "";
bool stringComplete = false;

void loop() {
  while (Serial.available()) {
    char inChar = (char)Serial.read();
    if (inChar == '\n') {
      stringComplete = true;
      break;
    } else {
      inputString += inChar;
    }
  }
  
  if (stringComplete) {
    Serial.print("Received command: ");
    //Serial.println(inputString);  // Debug print of full command string

    parseCommand(inputString);
    omni.movOmni(linearSpeed, rotSpeed, direction);
    inputString = "";
    stringComplete = false;

    last_command_time = millis();

    // Set stopped flag false because new command received and movement issued
    if (is_stopped) {
      is_stopped = false;
      Serial.println("Robot restarted after timeout.");
    }
  }

  if (millis() - last_command_time > command_timeout_ms) {
    if (!is_stopped) {  // Only stop once when timeout happens
      Serial.print("Stopping because of timeout. Last command was at: ");
      Serial.println(last_command_time);
      omni.stop();
      // Reset speeds
      linearSpeed = 0;
      rotSpeed = 0;
      direction = 0;
      is_stopped = true;
    }
  }
}